import heapq


class Process:
    def __init__(self, number, arrive_time, burst_time):
        self._number = number
        self.arrive_time = arrive_time
        self.burst_time = burst_time
        self.waiting_time = 0
        self.terminate_time = -1

    def __str__(self):
        TT = self.terminate_time - self.arrive_time
        return f"<process{self._number}>\nWT: {self.waiting_time}, TT: {TT}, NTT: {TT / self.burst_time:.1f}"


class Processor:
    def __init__(self, core="e"):
        self._core = core
        self.work = []
        self.power = 0
        self.time_quantum = None


# 각각 알고리즘 마다 처리해야하므로 각 알고리즘 클래스에 변수를 저장해야함
class Scheduling:
    def __init__(self, process_num, processor_num, p_core_num, arrive_time, burst_time, time_quantum=None):
        self.process_num = process_num
        self.processor_num = processor_num
        self.processors = {}
        self.processes = {}
        self.ready_q = []
        self.time = 0
        self.time_quantum = time_quantum
        self.power_consumption = 0
        self.readyqueue = []
        self.WT = []
        self.BT = []
        self.TT = []
        self.NTT = []
        self.POWER = []
        # 프로세서 객체 생성.

        for i in range(1, processor_num + 1):
            if p_core_num > 0:
                self.processors[i] = Processor("p")
                p_core_num -= 1

            else:
                self.processors[i] = Processor()

        # 프로세스 객체 생성.
        for i in range(process_num):
            self.processes[i + 1] = Process(i + 1, arrive_time[i], burst_time[i])

    # 도착시간이 가장 늦은 시간을 찾는 작업
    def _find_max_arrive_time(self):
        max_arr = -1
        for i in range(1, process_num + 1):
            max_arr = max(max_arr, self.processes[i].arrive_time)
        return max_arr

    # 모든 프로세서들을 살펴보아 하나의 프로세스라도 일하고 있다면 True를 리턴
    def _working(self):
        for i in range(1, self.processor_num + 1):
            if self.processors[i].work != []:
                return True
        return False

    # 작업수행이 가능한 프로세서, 즉 비어있는 프로세서를 찾는 작업
    def _find_empty_processor(self):
        for i in range(1, self.processor_num + 1):
            if not self.processors[i].work:
                return i

        return False

    def _calculate_waiting_time(self):
        for i in self.ready_q:
            tmp = i[1]
            self.processes[tmp].waiting_time += 1

    def _calculate_power_consumption(self):
        for i in range(1, self.processor_num + 1):
            self.power_consumption += self.processors[i].power

    # 프로세가 일하는 함수
    def _processor_running_for_SPN(self):
        # 프로세서를 하나씩 살핌
        for i in range(1, self.processor_num + 1):
            tmp_process = self.processors[i].work[:]
            # 일해야하는 프로세서 일 경우
            if tmp_process:
                tmp_process_num = tmp_process[1]
                # p코어라면
                if self.processors[i]._core == "p":
                    # 해당 프로세스의 실행시간 2개 빼줌
                    tmp_process[0] -= 2
                    # 해당 프로세서의 전력 3 증가
                    self.processors[i].power += 3
                # e코어라면
                else:
                    # 해당 프로세스의 실행 시간 1개 빼줌
                    tmp_process[0] -= 1
                    # 해당 프로세서의 전력 1 증가
                    self.processors[i].power += 1
                # 해당 프로세스가 모든 실행을 마쳤을 경우
                if tmp_process[0] <= 0:
                    # 빈 리스트를 해당 프로세서에게 저장하여 프로세스 종료를 알림.
                    self.processors[i].work = []
                    # 실행 종료시간 기록
                    self.processes[tmp_process_num].terminate_time = self.time + 1
                # 해당 프로세스의 잔여 실행시간이 있을 경우
                else:
                    # 다시 해당 프로세서에게 저장.
                    self.processors[i].work = tmp_process
            # 일할 프로세서가 아니라면 대기 전력 추가
            else:
                self.processors[i].power += 0.1

    def Shortest_Process_Next(self):
        visited = [False] * (self.process_num + 1)
        max_arr_time = self._find_max_arrive_time()
        # 도착할 프로세스들이 없고, 레디큐에도 프로세스가 없고 일하고 있는 프로세스가 없을 경우 while loop 종료! >> 스케줄링 종료
        while self.time <= max_arr_time or self.ready_q or self._working():

            # 레디큐에 도착한 프로세스 레디큐에 넣어주기
            self._fill_ready_q(visited)

            # 레디 큐가 빌 때까지 반복 >> 프로세서들에게 프로세스를 뿌려줄 수 있는 만큼 모두 뿌려주기
            while self.ready_q:
                # 빈 프로세스를 찾고
                empty_processor = self._find_empty_processor()
                # 일을 안하고 있는 프로세서가 없다면 종료
                if not empty_processor:
                    break
                # 레디 큐에 있는 프로세스를 빈 프로세서에게 넣어준다.
                self.processors[empty_processor].work = heapq.heappop(self.ready_q)
            self.setRQ()
            # 앞에서 이미 프로세서들에게 할당해줄 만큼 할당해 줬으므로 레디 큐에 남아 있는 프로세스들은 기다릴 수 밖에 없다 >> 대기시간 계산
            self._calculate_waiting_time()

            # 모두 프로세서들에게 프로세스를 배치 했으므로 프로세스 일하기
            self._processor_running_for_SPN()

            self.time += 1

        '''스케줄링 마친 후 총 전력 소비량 계산'''
        self._calculate_power_consumption()
        # print("\n\n----------SPN-----------")
        # for i in range(1, self.process_num + 1):
        #     print(self.processes[i])
        # print(f"\nPower_Consumption: {self.power_consumption:.1f}")

    def _processor_running_for_SRTN(self):
        # 프로세서를 하나씩 살핌
        for i in range(1, self.processor_num + 1):
            tmp_process = self.processors[i].work[:]
            # 일해야하는 프로세서 일 경우
            if tmp_process:
                tmp_process_num = tmp_process[1]
                # p코어라면
                if self.processors[i]._core == "p":
                    # 해당 프로세스의 실행시간 2개 빼줌
                    tmp_process[0] -= 2
                    # 해당 프로세서의 전력 3 증가
                    self.processors[i].power += 3
                # e코어라면
                else:
                    # 해당 프로세스의 실행 시간 1개 빼줌
                    tmp_process[0] -= 1
                    # 해당 프로세서의 전력 1 증가
                    self.processors[i].power += 1
                # 해당 프로세스가 모든 실행을 마쳤을 경우
                if tmp_process[0] <= 0:
                    # 빈 리스트를 해당 프로세서에게 저장하여 프로세스 종료를 알림.
                    self.processors[i].work = []
                    # 실행 종료시간 기록
                    self.processes[tmp_process_num].terminate_time = self.time + 1
                # 해당 프로세스의 잔여 실행시간이 있을 경우
                else:
                    # 해당 프로세서를 비위주고 있던 프로세스는 레디큐에 다시 저장.
                    self.processors[i].work = []
                    heapq.heappush(self.ready_q, tmp_process)
            # 일할 프로세서가 아니라면 대기 전력 추가
            else:
                self.processors[i].power += 0.1

    def Shortest_Remaining_Time_Next(self):

        visited = [False] * (self.process_num + 1)
        max_arr_time = self._find_max_arrive_time()
        # 도착할 프로세스들이 없고, 레디큐에도 프로세스가 없고 일하고 있는 프로세스가 없을 경우 while loop 종료! >> 스케줄링 종료
        while self.time <= max_arr_time or self.ready_q or self._working():

            # 레디큐에 도착한 프로세스 레디큐에 넣어주기
            self._fill_ready_q(visited)
            '''빈 프로세서 찾아서 빈 프로세서에 래디큐에서 기다리는 프로세스 넣는 과정'''
            # 2개 이상의 프로세서가 일을 안하고 있고 2개이상의 프로세스들이 레디큐에 있다면 >> 프로세스를 하나만 뿌려주면 안됨.
            # 레디 큐가 빌 때까지 반복 >> 프로세서들에게 프로세스를 뿌려줄 수 있는 만큼 모두 뿌려주기
            while self.ready_q:
                # 빈 프로세스를 찾고
                empty_processor = self._find_empty_processor()
                # 일을 안하고 있는 프로세서가 없다면 종료
                if not empty_processor:
                    break
                # 레디 큐에 있는 프로세스를 빈 프로세서에게 넣어준다.
                self.processors[empty_processor].work = heapq.heappop(self.ready_q)
            self.setRQ()
            # 앞에서 이미 프로세서들에게 할당해줄 만큼 할당해 줬으므로 레디 큐에 남아 있는 프로세스들은 기다릴 수 밖에 없다 >> 대기시간 계산
            self._calculate_waiting_time()

            # 모두 프로세서들에게 프로세스를 배치 했으므로 프로세스 일하기
            self._processor_running_for_SRTN()

            self.time += 1

        '''스케줄링 마친 후 총 전력 소비량 계산'''
        self._calculate_power_consumption()
        # print("\n\n----------SRTN-----------")
        # for i in range(1, self.process_num + 1):
        #     print(self.processes[i])
        # print(f"\nPower_Consumption: {self.power_consumption:.1f}")

    def _processor_running_for_RR(self):
        # 프로세서 하나씩 처리 >> 1초 처리하는 거임
        for i in range(1, self.processor_num + 1):
            # i 번째 프로세서의 프로세스
            tmp_process = self.processors[i].work[:]
            # i 번째 프로세서에게 할당 받은 프로세스가 있으면 작업 수행
            if tmp_process:
                # 프로세스 번호
                tmp_process_num = tmp_process[1]
                # 만약 i번째 프로세서가 p코어 일 경우
                if self.processors[i]._core == "p":
                    # 프로세스 실행시간 2 감소
                    tmp_process[0] -= 2
                    # i번째 프로세서의 전력 소비량 3 증가
                    self.processors[i].power += 3
                # i번째 프로세스가 e 코어 일 경우
                else:
                    # 프로세스 실행시간 1 감소
                    tmp_process[0] -= 1
                    # i번째 프로세서의 전력 소비량 1 증가
                    self.processors[i].power += 1
                # i번째 프로세서의 time_quantum 1 감소
                self.processors[i].time_quantum -= 1

                quantum = self.processors[i].time_quantum

                # 프로세스가 종료되었다면
                if tmp_process[0] <= 0:
                    # i번째 프로세서에서 제거
                    self.processors[i].work = []
                    # 종료된 프로세스의 종료시간 저장
                    self.processes[tmp_process_num].terminate_time = self.time + 1
                # 프로세스의 실행시간이 남아있다면
                else:
                    # time out이라면
                    if quantum <= 0:
                        # i번째 프로세서에서 프로세스 제거
                        self.processors[i].work = []
                        # 프로세스가 종료된 것은 아니고 time out 이므로 다시 레디큐에 삽입
                        self.ready_q.append(tmp_process)
                    # time_quantum이 남아 있다면
                    else:
                        # i번째 프로세서가 해당 프로세스 계속 작업 >> 1초뒤에 다시 작업하기위해 저장.
                        self.processors[i].work = tmp_process
            # i번째 프로세서에 할당된 프로세스가 없을 경우
            else:
                # i번째 프로세서의 전력 소비량 증가 >> 대기전력 소비량
                self.processors[i].power += 0.1

    # 레디큐에 도착한 프로세서를 레디큐로 옮겨주는 작업
    def _fill_ready_q_for_RR(self, visited):
        for i in range(1, self.process_num + 1):
            if not visited[i] and self.time >= self.processes[i].arrive_time:
                self.ready_q.append([self.processes[i].burst_time, self.processes[i]._number])
                visited[i] = True

    def _fill_ready_q(self, visited):
        for i in range(1, self.process_num + 1):
            if not visited[i] and self.time >= self.processes[i].arrive_time:
                heapq.heappush(self.ready_q, [self.processes[i].burst_time, self.processes[i]._number])
                visited[i] = True

    def Round_Robin(self):
        visited = [False] * (self.process_num + 1)
        # 도착하는 프로세스 중 도착시간이 제일 긴 시간을 찾는다.
        max_arr_time = self._find_max_arrive_time()
        # 현재시간이 최대 도착시간보다 크고, 레디큐가 비었으며, 모든 프로세스가 일을 안한다면 스케줄링 종료
        while self.time <= max_arr_time or self.ready_q or self._working():

            # 도착한 프로세스들 레디큐에 삽입
            self._fill_ready_q_for_RR(visited)

            # 프로세서들에게 할당 >> 할당할 수 있을 만큼 레디 큐에서 모두 할당해준다. >>  프로세서가 여러개이므로 반드시 고려할 점
            while self.ready_q:
                # 빈 프로세서를 찾는다
                empty_processor = self._find_empty_processor()
                # 빈 프로세스가 없다면 프로세스 할당 중지
                if not empty_processor:
                    break
                # 찾은 빈 프로세서에게 레디 큐에서 프로세스 할당 >> 선입 선출 구조
                self.processors[empty_processor].work = self.ready_q.pop(0)
                # 할당 받은 즉시 그 프로세서에게 입력으로 받은 time_quantum을 copy해준다.
                self.processors[empty_processor].time_quantum = self.time_quantum
            self.setRQ()
            # 레디 큐에 기다리는 프로세스를 찾아 그 프로세스의 대기시간을 증가시킨다.
            self._calculate_waiting_time()
            # 프로세서 작업 수행
            self._processor_running_for_RR()

            # 현재 시간 증가
            self.time += 1

        '''스케줄링 마친 후 총 전력 소비량 계산'''
        self._calculate_power_consumption()
        # print("\n\n----------RoundRobin-----------")
        # for i in range(1, self.process_num + 1):
        #     print(self.processes[i])
        # print(f"\nPower_Consumption: {self.power_consumption:.1f}")

    def setRQ(self):
        if len(self.ready_q) == 0:
            self.readyqueue.append([])
        else:
            tmp = []
            for i in self.ready_q:
                tmp.append("P" + str(i[1]))
            self.readyqueue.append(tmp)


    '''데이터 얻는 메서드'''

    def getRQ(self):
        # print(len(self.readyqueue))
        return self.readyqueue

    def getWT(self):
        for i in range(1, process_num + 1):
            self.WT.append(self.processes[i].waiting_time)
        return self.WT

    def getBT(self):
        for i in range(1, process_num + 1):
            self.BT.append(self.processes[i].burst_time)
        return self.BT

    def getTT(self):
        for i in range(1, process_num + 1):
            self.TT.append(self.processes[i].terminate_time - self.processes[i].arrive_time)
        return self.TT

    def getNTT(self):
        for i in range(process_num):
            self.NTT.append(round(self.TT[i] / self.BT[i], 2))
        return self.NTT

    def getPOWER(self):
        for i in range(1, processor_num + 1):
            self.POWER.append(self.processors[i].power)
        return self.POWER

    def getTOTALPOWER(self):
        return sum(self.POWER)

    def getTIME(self):
        return self.time


process_num = int(input("# of Processes: "))
processor_num = int(input("# of Processors: "))
p_core_num = int(input("# of P core: "))
arrive_time = list(map(int, input("Arrival time: ").split()))
burst_time = list(map(int, input("Burst time: ").split()))
time_quantum = int(input("Time quantum for RR: "))

# 스케줄링 객체 생성
SPN = Scheduling(process_num, processor_num, p_core_num, arrive_time, burst_time)
# spn 스케줄링 실행
SPN.Shortest_Process_Next()
# 스케줄링 객체 생성
SRTN = Scheduling(process_num, processor_num, p_core_num, arrive_time, burst_time)
# srtn 스케줄링 실행
SRTN.Shortest_Remaining_Time_Next()
# 스케줄링 객체 생성
RR = Scheduling(process_num, processor_num, p_core_num, arrive_time, burst_time, time_quantum)
# rr 스케줄링 실행.
RR.Round_Robin()

'''여기서부터는 데이터를 얻는 매서드 호출법 입니다. >> print문 안의 중괄호만 보시면 돼요!'''
# 일단 모든 데이터는 리스트로 묶어놨습니다 따로 필요한 데이터 형태나 수정사항 있으면 알려주세요
# RR은 RoundRobin
# 먼저 레디큐 호출법
print(f"\nReadyQueue: {RR.getRQ()}")
# WT 호출법
print(f"\nWT: {RR.getWT()}")
# BT 호출법
print(f"\nBT: {RR.getBT()}")
# TT 호출법
print(f"\nTT: {RR.getTT()}")
# NTT 호출법
print(f"\nNTT: {RR.getNTT()}")
# 각 코어당 전력 호출법
print(f"\nPOWER: {RR.getPOWER()}")
# 총 전력 호출법
print(f"\nTOTAL POWER: {RR.getTOTALPOWER()}")
# 스케줄링 종료시간 호출법
print(f"\nTIME: {RR.getTIME()}")

'''
추가로 레디큐는 0초부터 시작이고 마지막 시간은 없어요
만약 스케줄링 시간이 총 20 초면 0~19초까지의 레디큐 상태만 볼 수 있어요 20초는 그냥 빈 리스트라고 생각하셔도 돼요
그리고 레디 큐의 데이터 기준, 즉 레디 큐의 각 인덱스(시간)는 각 시간마다 레디큐에 도착한 프로세스 받아주고 프로세서들에게 할당까지 한 상태예요 
'''

# print(SRTN.getRQ())
# print(SPN.getRQ())
