# Shortest_Process_Next
import heapq

# 입력
process_num = int(input("# of Processes: "))
processor_num = int(input("# of Processors: "))
p_core_num = int(input("# of P core: "))
arrive_time = list(map(int, input("Arrival time: ").split()))
burst_time = list(map(int, input("Burst time: ").split()))
time_quantum = int(input("Time quantum for RR: "))

# 큐에 각 프로세스의 모든 정보를 담는다 : [도착시간, 실행시간, 프로세스 번호]
arrive_queue = []
result = {}
processors = {}

for i in range(process_num):
    heapq.heappush(arrive_queue, [arrive_time[i], burst_time[i], i + 1])
    # 각 프로세스의 도착시간, 실행시간, 대기시간 저장. >> 추후에 실행 종료 시간 까지 저장.
    result[i + 1] = [arrive_time[i], burst_time[i], 0]

result["power"] = 0

for i in range(processor_num):
    if p_core_num > 0:

        processors[i + 1] = [[], "p"]

        p_core_num -= 1
    else:
        processors[i + 1] = [[], "e"]

# print(arrive_queue)

'''도착 큐의 모든 프로세스들을 검사하며 현재 시간 보다 도착시간이 작거나 같은 프로세스의 갯수를 리턴한다.'''


def check_arrive(arrive_q, t):
    cnt = 0
    for i in arrive_q:
        if i[0] <= t:
            cnt += 1
    return cnt


# 모든 프로세서들이 하나라도 일을 하고 있다면 True를 리턴함. >> 즉, 스케줄링을 계속 진행해야하는 상태
def working(processors):
    for i in range(1, processor_num + 1):
        if processors[i][0] != []:
            return True

    return False


# 현재 시점에 일을 할 수 있는 프로세서를 찾는 함수.
def find_empty_processor(processors):
    for i in range(1, processor_num + 1):
        if not processors[i][0]:
            return i

    return False


# 프로세서가 일을 하는 함수
#  해당 프로세서의 프로세스의 정보, 프로세서의 코어를 받음
def running(process, core, t):
    if core == "p":
        process[0] -= 2
        result['power'] += 3
        if process[0] <= 0:
            result[process[2]].append(t + 1)
            return []
    else:
        process[0] -= 1
        result['power'] += 1
        if process[0] <= 0:
            result[process[2]].append(t + 1)
            return []

    return process


def print_out_put():
    for i in range(1, process_num + 1):
        print(f"Process {i}")
        BT = result[i][1]
        TT = result[i][3] - result[i][0]
        WT = result[i][2]
        print(f"WT of Process{i}: {WT}, TT of Process{i}: {TT}, NTT of Process{i}: {TT / BT:.2f}")
    print(f"Power Consumption: {result['power']:.1f}W")

def calculate_waiting_time(ready_q):
    for i in ready_q:
        process = i[2]
        result[process][2] += 1


def Shortest_Process_Next(arrive_q, processors):
    time = 0
    ready_q = []

    # 레디 큐와 도착 큐가 모두 빌 때까지 반복
    while ready_q or arrive_q or working(processors):
        '''프로세스가 레디 큐에 도착했는지 확인하는 과정 >> 도착시 레디 큐에 넣어줌'''

        cnt = check_arrive(arrive_q, time)

        for _ in range(cnt):
            tmp_process = heapq.heappop(arrive_q)
            # min heap 의 우선 순위의 기준을 도착 시각에서 실행 시각으로 바꾸어 줌
            tmp_process[0], tmp_process[1] = tmp_process[1], tmp_process[0]
            # 레디 큐에 삽입
            heapq.heappush(ready_q, tmp_process)

        # 레디 큐에 기다리는 프로세스가 있다면
        if len(ready_q):
            '''비어 있는 프로세서를 찾는 과정. >> 비어 있는 프로세서의 번호를 empty_p 에 저장.'''
            empty_p = find_empty_processor(processors)
            '''비어 있는 프로세서에 레디 큐의 프로세스를 집어 넣는 과정'''
            # 비어 있는 프로세서가 있다면
            if empty_p:
                # 레디큐에서 꺼내서 비어 있는 프로세서에게 넣어줌
                processors[empty_p][0] = heapq.heappop(ready_q)

            # 레디큐에 남은 프로세스들의 대기시간 계산해주어 result에 값 추가
            calculate_waiting_time(ready_q)

        '''프로세서가 일하는 과정'''

        for num in range(1, processor_num + 1):
            process, core = processors[num][0], processors[num][1]
            # 해당 프로세서 안에 프로세스가 있다면 >> 일할 거리가 있다면
            if process:
                # 일해줌
                processors[num][0] = running(process, core, time)
            # 해당 프로세서 안에 프로세스가 없다면 >> 일할 거리가 없다면
            else:
                # 대기전력 ++
                result["power"] += 0.1

        time += 1
    print_out_put()


Shortest_Process_Next(arrive_queue, processors)

# print(result)
