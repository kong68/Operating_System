class FCFS:
    def __init__(self, N, P, Pcore, AT, BT):
        self.N = N #프로세스 개수
        self.P = P#프로세서 개수
        self.Pcore = Pcore#P코어 개수
        self.AT = AT#AT
        self.BT = BT#BT
        self.BT_ori = BT[:]
        self.arrive_time = []#도착 시간
        self.coreinfo = [] #코어 종류 저장
        self.core = [[],[],[],[]]#코어 동작 저장
        self.readyqueueinfo = [] #레디큐 저장
        self.readyqueue = []  #레디큐
        self.readyqueuetmp= []
        self.start = [0]*N #시작시간
        self.end = [0]*N #종료시간
        self.WT = [] #WT
        self.TT = [] #TT
        self.power = [] #전력 저장
        self.totalpower = 0 #전체 전력
        self.NTT = [] #NTT
        self.corestate = [] #칸트 차트 데이터
        self.corestatetmp = [[],[],[],[]]
     
    #도착 시간 저장 
    def arrivetime(self):
        count = 0
        i = 0
        while count < N:
            if i == self.AT[count]:
                self.arrive_time.append(count+1)
                count+=1
            else:
                self.arrive_time.append(0)
            i+=1
            
    #프로세서 종류 설정
    def processor(self):
        count = N
        for j in range(self.Pcore):
            self.coreinfo.append(1)#P코어
        for z in range(self.P-self.Pcore):#E코어              
            self.coreinfo.append(2)

    #프로세서 동작
    def runningFCFS(self):
        self.arrivetime()
        self.processor()
        turn = [0]*self.P
        time = 0
        count = self.N
        while count>0:
            #도착한 프로세스가 있을경우 레디큐에 저장
            if time<len(self.arrive_time) and self.arrive_time[time] != 0:
                self.readyqueue.append(self.arrive_time[time])
                self.readyqueuetmp.append('P'+str(self.arrive_time[time]))
            #레디큐 상태 저장
            self.readyqueueinfo.append(self.readyqueuetmp[0:])        
            
            #빈프로세서 확인
            for i in range(self.P):
                if turn[i] == 0:
                    if self.readyqueue:
                        turn[i] = self.readyqueue.pop(0)
                        self.start[turn[i]-1] = time
                        self.corestatetmp[i].append('C'+str(i+1))#코어
                        self.corestatetmp[i].append(time)#시작시간
                        
            #프로세서 동작
            for i in range(self.P):
                self.core[i].append(turn[i])
            
            #실행완료 
            for i in range(self.P):
                if turn[i] != 0:
                    if self.coreinfo[i]==1:#P코어
                        self.BT[turn[i]-1]-=2
                    elif self.coreinfo[i]==2:#E코어
                        self.BT[turn[i]-1]-=1
                    if self.BT[turn[i]-1]<=0:
                        self.end[turn[i]-1] = time+1
                        self.corestatetmp[i].append(time+1)#종료 시간
                        self.corestatetmp[i].append('P'+str(turn[i]))#프로세스
                        turn[i] = 0
                        count -= 1
                        
            #간트 차트 데이터 저장            
            for i in range(self.P):
                if len(self.corestatetmp[i]) == 4:
                    tmp = self.corestatetmp[i]
                    self.corestate.append(tmp)
                    self.corestatetmp[i] = []
                    
            #시간증가            
            time+=1
            
        #WT, TT, 전력, NTT 계산
        self.setWT()
        self.setTT()
        self.setpower()
        self.setNTT()
        
    #WT계산      
    def setWT(self):
        for i in range(self.N):
            self.WT.append(self.start[i]-self.AT[i])
     
    #TT계산
    def setTT(self):
        for i in range(self.N):
            self.TT.append(self.end[i]-self.AT[i])
    
     #전력계산
    def setpower(self):
        for i in range(self.P):
            powertmp = []
            tmp = 0
            wait = self.core[i].count(0)
            active=len(self.core[i])-wait
            if self.coreinfo[i]==1:
                tmp = active*3+wait*0.1
                powertmp.append("Pcore")
                powertmp.append(tmp)
            elif self.coreinfo[i]==2:
                tmp = active*3+wait*0.1
                powertmp.append("Ecore")
                powertmp.append(tmp)
            self.power.append(powertmp)
            self.totalpower += tmp
        
    #NTT 계산
    def setNTT(self):
        for i in range(len(self.TT)):
            self.NTT.append(round(self.TT[i]/self.BT_ori[i], 2))
    
    #데이터 반환
    def getWT(self):          #WT
        return self.WT
    def getTT(self):          #TT
        return self.TT
    def getpower(self):  #코어 전체 전력
        return self.power
    def gettotalpower(self):  #코어 전체 전력
        return self.totalpower
    def getNTT(self):        #NTT
        return self.NTT
    def getreadyqueueinfo(self):  #레디큐 
        return self.readyqueueinfo
    def getcorestate(self):  #간트출력 데이터
        #시작시간 기준으로 정렬하고 종료시간 기준으로 정렬
        self.corestate.sort(key = lambda pt: (pt[1], pt[2]))
        return self.corestate
