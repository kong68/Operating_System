class FCFS:
    #생성자
    def __init__(self, N, P, Pcore, AT, BT):
        self.N = N #프로세스 개수
        self.P = P#프로세서 개수
        self.Pcore = Pcore#P코어 개수
        self.AT = AT#AT
        self.BT = BT#BT
        self.BT_ori = BT[:]
        self.arrive_time = []#도착 시간
        self.coreinfo = [] #코어 종류 저장
        self.core = [[],[],[],[]]#코어 동작 저장
        self.readyqueueinfo = [] #레디큐 저장
        self.readyqueue = []  #레디큐
        self.readyqueuetmp= []
        self.start = [0]*N #시작시간
        self.end = [0]*N #종료시간
        self.WT = [] #WT
        self.TT = [] #TT
        self.power = [] #전력 저장
        self.totalpower = 0 #전체 전력
        self.NTT = [] #NTT
        self.corestate = [] #칸트 차트 데이터
        self.corestatetmp = [[],[],[],[]]

    #스케줄링 동작
    def runningFCFS(self):
        self.processor()#프로세서 정보 저장
        turn = [0]*self.P#프로세서에서 일하고 있는 프로세스 저장 리스트
        time = 0#시간
        count = self.N#초기 프로세스 갯수 저장
        
        #프로세스가 다 실행할때까지 
        while count>0:
            #도착한 프로세스 확인 -> 레디큐 저장
            if time in self.AT:#현재 시간에 도착한 프로세스가 있다면
                for i in range(len(self.AT)):#AT 리스트 확인
                    if self.AT[i] == time:
                        self.readyqueue.append(i+1)#레디큐에 프로세스 추가
                        self.readyqueuetmp.append('P'+str(i+1))#레디큐에 프로세스 추가
            
            #레디큐 상태 저장
            self.readyqueueinfo.append(self.readyqueuetmp[0:])      
            
            #빈프로세서 확인
            for i in range(self.P):#프로세서 개수 만큼 반복
                if turn[i] == 0: #빈프로세서가 있다면
                    if self.readyqueue: #레디큐에 프로세스가 있다면
                        turn[i] = self.readyqueue.pop(0) #프로세서 할당
                        self.readyqueuetmp = [item for item in self.readyqueuetmp if item != 'P'+str(turn[i])]#레디큐에서 제거
                        self.start[turn[i]-1] = time
                        self.corestatetmp[i].append('c'+str(i+1))#코어
                        self.corestatetmp[i].append(time)#시작시간
                        
            
            #프로세서 동작
            for i in range(self.P):
                self.core[i].append(turn[i])
            
            #실행완료 
            for i in range(self.P):
                if turn[i] != 0:
                    if self.coreinfo[i]==1:#P코어일 경우
                        self.BT[turn[i]-1]-=2
                    elif self.coreinfo[i]==2:#E코어 경우
                        self.BT[turn[i]-1]-=1
                    if self.BT[turn[i]-1]<=0:#모두 실행한 경우
                        self.end[turn[i]-1] = time+1#종료 시간 저장
                        self.corestatetmp[i].append(time+1)#종료 시간
                        self.corestatetmp[i].append('p'+str(turn[i]))#프로세스 정보 저장
                        turn[i] = 0 #빈 프로세서로 만들어주기
                        count -= 1 #실행완료된 프로세스 빼주기
                        
            #간트 차트 데이터 저장            
            for i in range(self.P):
                if len(self.corestatetmp[i]) == 4:#모든 정보가 저장된 경우
                    tmp = self.corestatetmp[i]
                    self.corestate.append(tmp)#저장
                    self.corestatetmp[i] = []# 초기화
       
            #시간증가            
            time+=1
            
        #WT, TT, 전력, NTT 계산
        self.setTT()
        self.setWT()
        self.setpower()
        self.setNTT()
    
    #프로세서 종류 설정
    def processor(self):
        # 1 : P코어, 2 : E코어
        for j in range(self.Pcore):#P코어 갯수만큼
            self.coreinfo.append(1)#P코어 
        for z in range(self.P-self.Pcore):#코어 전체 개수 - P코어 개수 = E코어              
            self.coreinfo.append(2)#E코어    
    
    #WT계산      
    def setWT(self):
        for i in range(self.N):
            self.WT.append(self.TT[i]-self.BT_ori[i])
     
    #TT계산
    def setTT(self):
        for i in range(self.N):
            self.TT.append(self.end[i]-self.AT[i])
    
     #전력계산
    def setpower(self):
        for i in range(self.P):
            powertmp = []
            tmp = 0
            wait = self.core[i].count(0)
            active=len(self.core[i])-wait
            if self.coreinfo[i]==1:
                tmp = active*3+wait*0.1
                powertmp.append("Pcore")
                powertmp.append(tmp)
            elif self.coreinfo[i]==2:
                tmp = active+wait*0.1
                powertmp.append("Ecore")
                powertmp.append(tmp)
            self.power.append(powertmp)
            self.totalpower += tmp
        
    #NTT 계산
    def setNTT(self):
        for i in range(len(self.TT)):
            self.NTT.append(round(self.TT[i]/self.BT_ori[i], 2))
    
    #데이터 반환
    def getWT(self):          #WT
        return self.WT
    def getTT(self):          #TT
        return self.TT
    def getpower(self):  #코어 전체 전력
        return self.power
    def gettotalpower(self):  #코어 전체 전력
        return self.totalpower
    def getNTT(self):        #NTT
        return self.NTT
    def getreadyqueueinfo(self):  #레디큐 
        return self.readyqueueinfo
    def getcorestate(self):  #간트출력 데이터
        #시작시간 기준으로 정렬하고 종료시간 기준으로 정렬
        self.corestate.sort(key = lambda pt: (pt[1], pt[2]))
        return self.corestate
    def getstart(self):
        return self.start
    def getcore(self):
        return self.core
