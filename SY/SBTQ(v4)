class SBTQ(FCFS):
    #프로세서 동작
    def runningSBTQ(self):
        self.processor()#프로세서 정보 저장
        turn = [0]*self.P#프로세서에서 일하고 있는 프로세스 저장 리스트
        time = 0#시간
        count = self.N#초기 프로세스 갯수 저장
        TQ = 0 
        readytmp = []
        self.work = [0]*self.N
        
        #프로세스가 다 실행할때까지
        while count>0:
            #도착한 프로세스 확인 -> 레디큐 저장
            if time in self.AT:#현재 시간에 도착한 프로세스가 있다면
                for i in range(len(self.AT)):#AT 리스트 확인
                    if self.AT[i] == time:
                        self.readyqueue.append(i+1)#레디큐에 프로세스 추가
                        self.readyqueuetmp.append('P'+str(i+1))#레디큐에 프로세스 추가
            if readytmp:
                for i in readytmp:
                    self.readyqueue.append(i)
                    self.readyqueuetmp.append('P'+str(i))
                readytmp = []
            
        
    
            TQ= self.setnextprocess(turn)
            
            #빈프로세서 확인
            for i in range(self.P):#프로세서 개수 만큼 반복
                if turn[i] == 0:#빈프로세서가 있다면
                    if self.readyqueue:#레디큐에 프로세스가 있다면
                        turn[i] = self.readyqueue.pop(0)#프로세서 할당
                        self.readyqueuetmp = [item for item in self.readyqueuetmp if item != 'P'+str(turn[i])] #레디큐에서 제거
                        if self.start[turn[i]-1]==0 :
                            self.start[turn[i]-1] = time
                        self.corestatetmp[i].append('c'+str(i+1))#코어
                        self.corestatetmp[i].append(time)#시작시간
            
            #레디큐 상태 저장
            self.readyqueueinfo.append(self.readyqueuetmp[0:])            
            
            #프로세서 동작
            for i in range(self.P):
                self.core[i].append(turn[i])
                self.work[turn[i]-1] += 1
        
            #실행완료 
            for i in range(self.P):
                if turn[i] != 0:
                    if self.coreinfo[i]==1:#P코어일 경우
                        self.BT[turn[i]-1]-=2
                    elif self.coreinfo[i]==2:#E코어 경우
                        self.BT[turn[i]-1]-=1
                    if self.BT[turn[i]-1]<=0:#모두 실행한 경우
                        self.end[turn[i]-1] = time+1#종료 시간 저장
                        self.corestatetmp[i].append(time+1)#종료 시간
                        self.corestatetmp[i].append('p'+str(turn[i]))#프로세스
                        turn[i] = 0#빈 프로세서로 만들어주기
                        count -= 1#실행완료된 프로세스 빼주기
                    else:
                        if time - self.corestatetmp[i][1]+1 >= TQ:
                            readytmp.append(turn[i])
                            #self.readyqueuetmp.append('P'+str(turn[i]))
                            self.corestatetmp[i].append(time+1)#종료 시간
                            self.corestatetmp[i].append('p'+str(turn[i]))#프로세스
                            turn[i] = 0
                            
            #간트 차트 데이터 저장            
            for i in range(self.P):
                if len(self.corestatetmp[i]) == 4:
                    tmp = self.corestatetmp[i]
                    self.corestate.append(tmp)
                    self.corestatetmp[i] = []
                    
            #시간증가            
            time+=1
            
        #WT, TT, 전력, NTT 계산
        self.setTT()
        self.setWT()
        self.setpower()
        self.setNTT()
    def setWT(self):
        for i in range(self.N):
            self.WT.append(self.end[i] - self.work[i] - self.AT[i])  
    #다음 실행 프로세스 결정 
    def setnextprocess(self, turn):
        tmp = []
        for i in self.readyqueue:
            if i != 0:
                tmp.append(self.BT_ori[i-1])
        for i in turn :
            if i != 0:
                tmp.append(self.BT_ori[i-1]) 
        return min(tmp)
